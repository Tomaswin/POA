type User {

	userId: ID!
	name: String
	lastName: String
	email: String!
	password: String!
	points: Int!
	exchangesHistory: [Exchange]
}

type Product {

	productId: ID!
	name: String!
	description: String
	availability: Boolean!
	totalPoints: Int!
}

scalar Date

type Exchange {

	exchangeId: ID!
	user: String
	productList: [Product!]
	date: Date
	totalPoints: Int
}

type Response {
	code: Int!
	msg: String!
}
type Query{
	user(token: String!): User
	product: [Product]
	exchange: [Exchange]
	exchangeByUser(token: String!): [Exchange]
}

type Mutation{
	deleteProduct(productId: ID!): Boolean
	updateProduct(productId: ID!, name: String, description: String, availability: Boolean, totalPoints: Int): Boolean
	createProduct(name: String!, description: String, availability: Boolean!,totalPoints: Int!): ID!
	exchangePoints(token: String!, products: [ID!]): String
	login(email: String!, password: String!): Response!
	createUser(name: String, lastName: String, email: String!, password: String!, points: Int!): String
}

